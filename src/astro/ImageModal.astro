---
import { inferRemoteSize } from "astro:assets";

interface Props {
  src: string;
  alt: string;
}

const { src, alt } = Astro.props;
const { width, height } = await inferRemoteSize(src);

let optimise = false;
if (src.includes("imagekit")) {
  optimise = true;
}
---

<div class="image-modal-container">
  <div class="thumbnail-container">
    <div class="loading-box"></div>
    {
      optimise ? (
        <img
          decoding="async"
          src={`${src}/tr:w-600`}
          alt={alt}
          width={width}
          height={height}
          class="thumbnail hidden"
          loading="lazy"
          srcset={`
${src}/tr:w-900,q-100 600w,
${src}/tr:w-1200,q-100 1200w
      `}
          sizes="(min-width: 768px) 650px, 80vw"
        />
      ) : (
        <img
          decoding="async"
          src={src}
          alt={alt}
          width={width}
          height={height}
          class="thumbnail hidden"
          loading="lazy"
        />
      )
    }
  </div>
  <dialog class="modal">
    <!-- Spinner needs parent div because `overflow: hidden` does not work on <span> on firefox -->
    <div class="spinner-container">
      <span class="spinner"></span>
    </div>
    {
      optimise ? (
        <img
          src={`${src}/tr:w-1200`}
          alt={alt}
          class="full-size hidden"
          loading="lazy"
          srcset={`
  ${src}/tr:w-1080,q-100 640w,
  ${src}/tr:w-1920,q-100 1920w,
  ${src}/tr:w-2048,q-100 2048w,
  ${src}/tr:w-3840,q-100 3840w
`}
          sizes="100vw"
        />
      ) : (
        <img
          src={src}
          alt={alt}
          width={width}
          height={height}
          class="full-size hidden"
          loading="lazy"
        />
      )
    }
    <div class="modal-background"></div>
  </dialog>
</div>

<style lang="scss">
  img {
    image-rendering: smooth;
  }

  .image-modal-container {
    /* void */
  }

  .thumbnail-container {
    position: relative;
    margin-top: 10px;
  }

  .thumbnail {
    display: block;
    cursor: zoom-in;
    max-width: 100%;
    height: auto;
    vertical-align: top;
  }

  .loading-box {
    position: absolute;
    z-index: 1;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    overflow: hidden;
    background-color: #eee;
    border: 1px solid #ccc;
    box-sizing: border-box;
  }

  .loading-box::after {
    content: "";
    display: block;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(116, 190, 181, 0) 0%,
      rgba(116, 190, 181, 0.2) 20%,
      rgba(116, 190, 181, 0.4) 50%,
      rgba(116, 190, 181, 0.2) 80%,
      rgba(116, 190, 181, 0) 100%
    );
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }

    100% {
      transform: translateX(100%);
    }
  }

  .modal {
    margin: auto;
    align-content: center;
    padding: 0;
    border: none;
    outline: none;
  }

  .fixed-full-page {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .full-size {
    @extend .fixed-full-page;
    object-fit: contain;
    cursor: zoom-out;
  }

  .modal-background {
    @extend .fixed-full-page;
    background: rgba(0, 0, 0, 1);
    z-index: -1;
  }

  .spinner {
    width: 48px;
    height: 48px;
    border: 5px solid #fff;
    border-bottom-color: transparent;
    border-radius: 50%;
    display: block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
  }

  .spinner-container {
    overflow: hidden;
  }

  @keyframes rotation {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .none {
    display: none !important;
  }

  .hidden {
    visibility: hidden;
  }

  .no-scroll {
    overflow: hidden;
  }
</style>

<script>
  const containers = document.querySelectorAll(".image-modal-container");

  containers.forEach((container) => {
    const thumbnail = container.querySelector(".thumbnail") as HTMLImageElement;
    const skeleton = container.querySelector(".loading-box") as HTMLDivElement;
    const modal = container.querySelector(".modal") as HTMLDialogElement;
    const image = container.querySelector(".full-size") as HTMLImageElement;
    const spinner = container.querySelector(".spinner") as HTMLSpanElement;

    function closeDialog() {
      modal.close();
      document.body.classList.remove("no-scroll");
    }

    thumbnail.addEventListener("click", () => {
      modal.showModal();
      document.body.classList.add("no-scroll");
    });

    modal.addEventListener("click", () => {
      closeDialog();
    });

    image.addEventListener("click", () => {
      closeDialog();
    });

    if (thumbnail.complete) {
      skeleton.classList.add("none");

      thumbnail.classList.remove("hidden");
    } else {
      thumbnail.addEventListener("load", () => {
        skeleton.classList.add("none");

        thumbnail.classList.remove("hidden");
      });
    }

    if (image.complete) {
      spinner.classList.add("none");

      image.classList.remove("hidden");
    } else {
      image.addEventListener("load", () => {
        spinner.classList.add("none");

        image.classList.remove("hidden");
      });
    }
  });
</script>
