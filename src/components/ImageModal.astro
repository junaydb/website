---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  src: ImageMetadata;
  alt: string;
}

const { src, alt } = Astro.props;
const imageWidth = src.width;
const imageHeight = src.height;
---

<div class="image-modal-container">
  <Image src={src} alt={alt} class="thumbnail" loading="lazy" />
  <dialog class="modal">
    <Image src={src} alt={alt} class="full-size" quality="max" />
    <div class="modal-background"></div>
  </dialog>
</div>

<style lang="scss" define:vars={{ imageWidth, imageHeight }}>
  .image-modal-container {
  }

  .thumbnail {
    display: block;
    cursor: zoom-in;
    width: 100%;
    height: auto;
    margin-top: var(--separation-margin);
  }

  .modal {
    margin: auto;
    align-content: center;
    padding: 0;
    border: none;
    outline: none;
  }

  .fixed-full-page {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .full-size {
    @extend .fixed-full-page;
    object-fit: contain;
    cursor: zoom-out;
  }

  .modal-background {
    @extend .fixed-full-page;
    background: rgba(0, 0, 0, 1);
    z-index: -1;
  }
</style>

<script>
  interface ImageModalElements {
    container: HTMLElement;
    thumbnail: HTMLImageElement;
    modal: HTMLDialogElement;
    image: HTMLImageElement;
  }

  function getModalElements(container: HTMLElement) {
    const thumbnail = container.querySelector(".thumbnail");
    const modal = container.querySelector(".modal");
    const image = container.querySelector(".full-size");

    if (
      !(thumbnail instanceof HTMLImageElement) ||
      !(modal instanceof HTMLDialogElement) ||
      !(image instanceof HTMLImageElement)
    ) {
      console.error("Invalid modal structure");
      return null;
    }

    return { container, thumbnail, modal, image };
  }

  function setupModalListeners({
    thumbnail,
    modal,
    image,
  }: ImageModalElements) {
    thumbnail.addEventListener("click", () => {
      modal.showModal();
    });

    modal.addEventListener("click", () => {
      modal.close();
    });

    image.addEventListener("click", () => {
      modal.close();
    });
  }

  function initializeImageModals(): void {
    const containers = document.querySelectorAll<HTMLElement>(
      ".image-modal-container",
    );

    containers.forEach((container) => {
      const elements = getModalElements(container);
      if (elements) {
        setupModalListeners(elements);
      }
    });
  }

  document.addEventListener("DOMContentLoaded", initializeImageModals);
</script>
