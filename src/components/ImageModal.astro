---
import { Image, inferRemoteSize } from "astro:assets";
import {
  bodyWidth,
  getHeightFromAspectRatio,
} from "@helpers/getHeightFromAspectRatio";

interface Props {
  src: string;
  alt: string;
}

const { src, alt } = Astro.props;

const { width, height } = await inferRemoteSize(src);

const thumbnailWidth = `${bodyWidth}px`;
const thumbnailHeight = `${getHeightFromAspectRatio(width, height)}px`;
---

<div class="image-modal-container">
  <div class="thumbnail-container">
    <div class="loading-box"></div>
    <img data-src={src} alt={alt} class="thumbnail hidden lazy" />
  </div>
  <dialog class="modal">
    <Image src={src} alt={alt} inferSize class="full-size" loading="lazy" />
    <div class="modal-background"></div>
  </dialog>
</div>

<style lang="scss" define:vars={{ thumbnailWidth, thumbnailHeight }}>
  .image-modal-container {
    /* void */
  }

  .none {
    display: none;
  }

  .hidden {
    visibility: hidden;
  }

  .thumbnail-container {
    position: relative;
    margin-top: var(--separation-margin);
  }

  .thumbnail {
    display: block;
    top: 0;
    left: 0;
    cursor: zoom-in;
    width: 100%;
    height: auto;
  }

  .loading-box {
    position: absolute;
    z-index: 1;
    width: var(--thumbnailWidth);
    height: var(--thumbnailHeight);
    top: 0;
    left: 0;
    overflow: hidden;
    background-color: #111;
    border: 1px solid rgb(46, 46, 46);
  }

  .loading-box::after {
    content: "";
    display: block;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(#555, 0) 0%,
      rgba(#555, 0.2) 20%,
      rgba(#555, 0.4) 50%,
      rgba(#555, 0.2) 80%,
      rgba(#555, 0) 100%
    );
    animation: shimmer 1.5s infinite;
  }

  .modal {
    margin: auto;
    align-content: center;
    padding: 0;
    border: none;
    outline: none;
  }

  .fixed-full-page {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .full-size {
    @extend .fixed-full-page;
    object-fit: contain;
    cursor: zoom-out;
  }

  .modal-background {
    @extend .fixed-full-page;
    background: rgba(0, 0, 0, 1);
    z-index: -1;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }

    100% {
      transform: translateX(100%);
    }
  }
</style>

<script>
  import LazyLoad from "vanilla-lazyload";

  const lazyLoader = new LazyLoad({});

  interface ImageModalElements {
    loader: HTMLDivElement;
    thumbnail: HTMLImageElement;
    modal: HTMLDialogElement;
    image: HTMLImageElement;
  }

  function getModalElements(container: HTMLElement) {
    const thumbnail = container.querySelector(".thumbnail");
    const loader = container.querySelector(".loading-box");
    const modal = container.querySelector(".modal");
    const image = container.querySelector(".full-size");

    if (
      !(thumbnail instanceof HTMLImageElement) ||
      !(loader instanceof HTMLDivElement) ||
      !(modal instanceof HTMLDialogElement) ||
      !(image instanceof HTMLImageElement)
    ) {
      console.error("Invalid modal structure");
      return null;
    }

    return { thumbnail, loader, modal, image };
  }

  function setupModalListeners({
    thumbnail,
    loader,
    modal,
    image,
  }: ImageModalElements) {
    thumbnail.addEventListener("click", () => {
      modal.showModal();
    });

    modal.addEventListener("click", () => {
      modal.close();
    });

    image.addEventListener("click", () => {
      modal.close();
    });

    thumbnail.addEventListener("load", () => {
      loader.classList.add("none");
      thumbnail.classList.remove("hidden");
    });
  }

  function initialiseImageModals() {
    const containers = document.querySelectorAll<HTMLElement>(
      ".image-modal-container",
    );

    containers.forEach((container) => {
      const elements = getModalElements(container);
      if (elements) {
        setupModalListeners(elements);
      }
    });
  }

  initialiseImageModals();
</script>
