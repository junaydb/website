---
import BaseLayout from "@/astro/BaseLayout.astro";
import Tag from "@/astro/Tag.astro";
import ImageModal from "@/astro/ImageModal.astro";
import InlineLink from "@/astro/InlineLink.astro";
import type { textRowType, linkRowType } from "@/content/postSchema";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts
    .flat()
    .filter((post) => post.data.published)
    .map((post) => ({
      params: { collection: post.collection, slug: post.id },
      props: { post },
    }));
}

const { post } = Astro.props;
const { Content } = await render(post);
---

<BaseLayout title={post.data.title}>
  <div class="section">
    <h1>
      {post.data.title}
    </h1>
  </div>

  <div class="section">
    {
      post.data.rows?.map((row) => {
        return (
          <>
            <h2>{row.title}</h2>
            <div class="items">
              {row.items.map((item) => {
                if (row.type === "text") {
                  return <Tag text={item as textRowType} />;
                } else if (row.type === "links") {
                  const link = item as linkRowType;
                  return <Tag text={link.text} href={link.href} />;
                }
              })}
            </div>
          </>
        );
      })
    }
  </div>

  {
    post.data.description ? (
      <div class="section">
        <h2>Description</h2>
        <p class="prose">{post.data.description}</p>
      </div>
    ) : null
  }

  <div class="markdown">
    <Content components={{ a: InlineLink, img: ImageModal }} />
  </div>
</BaseLayout>

<style>
  h1 {
    font-size: 18px;
  }

  .prose {
    font-family: "Noto Sans", Verdana, Geneva, Tahoma, sans-serif;
  }

  .markdown {
    margin-bottom: 20px;

    p {
      margin-bottom: 16px;
    }

    p,
    a {
      font-family: "Noto Sans", Verdana, Geneva, Tahoma, sans-serif;
      font-size: 14px;
    }

    p > code {
      font-family: Menlo, Monaco, Consolas, "Lucida Console", monospace;
      font-size: 12px;
      padding: 2px 4px 2px 4px;
      border-radius: var(--border-radius-bg);
      background-color: #f9f9f9;
      box-shadow:
        rgba(255, 255, 255, 0.5) 0 1px 0 inset,
        rgba(0, 0, 0, 0.125) 0 1px 1px;
      box-sizing: border-box;
    }
  }

  html.dark .markdown {
    p > code {
      background-color: rgb(40, 40, 40);
      box-shadow:
        rgba(120, 120, 120, 0.5) 0 1px 0 inset,
        rgba(0, 0, 0, 0.125) 0 1px 1px;
    }
  }

  .section {
    margin-bottom: var(--separation-margin);
  }

  .items {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
  }

  @media (min-width: 768px) {
    .markdown {
      p,a  {
        font-size: 16px;
      }

      p > code {
        font-size: 13.5px;
      }
    }
  }
</style>
