---
import BaseLayout from "@layouts/BaseLayout.astro";
import { getCollection, render } from "astro:content";
import { getAllCollectionNames } from "@helpers/getAllCollectionNames";
import type { linkRowType } from "@schemas/collectionSchema";

export async function getStaticPaths() {
  const allCollections = await Promise.all(
    getAllCollectionNames().map((name) => getCollection(name)),
  );
  return allCollections.flat().map((post) => ({
    params: { collection: post.collection, slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);
---

<BaseLayout title={post.data.title}>
  <div class="section">
    <h2>Title</h2>
    <h1>
      {post.data.title}
    </h1>
  </div>

  <div class="section">
    {
      post.data.rows?.map((row) => {
        return (
          <>
            <h2>{row.title}</h2>
            <div class="items">
              {row.items.map((item) =>
                row.type == "text" ? (
                  <p>{item}</p>
                ) : (
                  <a href={(item as linkRowType).href}>
                    {(item as linkRowType).text}
                  </a>
                ),
              )}
            </div>
          </>
        );
      })
    }
  </div>
  <h2>Description</h2>
  <Content />
</BaseLayout>

<style lang="scss">
  .section {
    margin-bottom: var(--separation-margin);
  }

  .items {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    p,
    a {
      font-size: 13px;
      text-align: center;
      padding: var(--heading-margin) var(--inset-margin) var(--heading-margin)
        var(--inset-margin);
      margin: 0px calc(var(--inset-margin) * -1) px 0px
        calc(var(--inset-margin) * -1);
      background-color: rgb(31, 31, 31);
      border: 1px solid rgb(46, 46, 46);
      border-radius: var(--border-radius-bg);
    }
  }
</style>

<script is:inline>
  const containers = document.querySelectorAll(".image-modal-container");

  containers.forEach((container) => {
    const placeholder = container.querySelector(".placeholder");
    const thumbnail = container.querySelector(".thumbnail");
    const skeleton = container.querySelector(".loading-box");
    const modal = container.querySelector(".modal");
    const image = container.querySelector(".full-size");
    const spinner = container.querySelector(".spinner");

    function closeDialog() {
      modal.close();
      document.body.classList.remove("no-scroll");
    }

    thumbnail.addEventListener("click", () => {
      modal.showModal();
      document.body.classList.add("no-scroll");
    });

    modal.addEventListener("click", () => {
      closeDialog();
    });

    image.addEventListener("click", () => {
      closeDialog();
    });

    placeholder.addEventListener("load", () => {
      skeleton.classList.remove("hidden");
    });

    thumbnail.addEventListener("load", () => {
      placeholder.classList.add("none");
      skeleton.classList.add("none");

      thumbnail.classList.remove("no-space");
      thumbnail.classList.remove("hidden");
    });

    image.addEventListener("load", () => {
      spinner.classList.add("none");

      image.classList.remove("hidden");
    });
  });
</script>
