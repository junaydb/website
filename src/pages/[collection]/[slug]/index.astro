---
import BaseLayout from "@/astro/BaseLayout.astro";
import { getAllCollectionNames } from "@/getAllCollectionNames";
import type { linkRowType } from "@/content/collectionSchema";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const allCollections = await Promise.all(
    getAllCollectionNames().map((name) => getCollection(name)),
  );
  return allCollections
    .flat()
    .filter((post) => post.data.published)
    .map((post) => ({
      params: { collection: post.collection, slug: post.id },
      props: { post },
    }));
}

const { post } = Astro.props;
const { Content } = await render(post);
---

<BaseLayout title={post.data.title}>
  <div class="section">
    <h1>
      {post.data.title}
    </h1>
  </div>

  <div class="section">
    {
      post.data.rows?.map((row) => {
        return (
          <>
            <h2>{row.title}</h2>
            <div class="items">
              {row.items.map((item) => {
                if (row.type === "text") {
                  return <p>{item}</p>;
                } else if (row.type === "links") {
                  return (
                    <a href={(item as linkRowType).href}>
                      {(item as linkRowType).text}
                    </a>
                  );
                }
              })}
            </div>
          </>
        );
      })
    }
  </div>

  {
    post.data.description ? (
      <div class="section">
        <h2>Description</h2>
        <p class="prose">{post.data.description}</p>
      </div>
    ) : null
  }

  <div class="markdown">
    <Content />
  </div>
</BaseLayout>

<style>
  h1 {
    font-size: 18px;
  }

  .prose {
    font-family: "Inter Variable", sans-serif;
  }

  .markdown {
    p {
      font-family: "Inter Variable", sans-serif;
      margin: 10px 0 10px 0;
    }
  }

  .section {
    margin-bottom: var(--separation-margin);
  }

  .items {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    p,
    a {
      font-size: 13px;
      text-align: center;
      padding: var(--link-padding);
      border-radius: var(--border-radius-bg);
      background-color: #f8f8f8;
      background-image: linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.8),
        rgba(235, 255, 255, 0.3)
      );
      box-shadow:
        rgba(255, 255, 255, 0.5) 0 1px 0 inset,
        rgba(0, 0, 0, 0.05) 0 1px 1px;
      box-sizing: border-box;
      transition: all 0.15s ease-in-out;
    }
  }
</style>
